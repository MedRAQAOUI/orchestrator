REPLACE MACRO PDY_PDML_IHM_${sid}.MM_STEP_TRACE(batchName VARCHAR(15),executionId BIGINT,sequenceNumerator  BYTEINT,implicitSequenceNumerator  BYTEINT,stepName VARCHAR(100),stepState VARCHAR(15),debutExecutionStep TIMESTAMP(6), finExecutionStep TIMESTAMP(6)  ) AS ( 
LOCK TABLE PDY_PDML_IHM_${sid}.T_STEP_TRACE FOR WRITE 	
MERGE INTO PDY_PDML_IHM_${sid}.T_STEP_TRACE  AS STEP_TRACE
USING
( SELECT :batchName as BATCH_NAME  ,:executionId as ID_EXECUTION ,:sequenceNumerator as SEQUENCE_NUMERATOR ,:implicitSequenceNumerator as IMPLICIT_SEQUENCE_NUMERATOR ,:stepName as STEP_NAME ,:stepState as STEP_STATE, :debutExecutionStep as DH_DEBUT_EXEC_STEP ,:finExecutionStep as DH_FIN_EXEC_STEP ) as PARAM
ON 
  STEP_TRACE.BATCH_NAME = PARAM.BATCH_NAME
  AND STEP_TRACE.ID_EXECUTION = PARAM.ID_EXECUTION
  AND STEP_TRACE.SEQUENCE_NUMERATOR = PARAM.SEQUENCE_NUMERATOR
  AND STEP_TRACE.IMPLICIT_SEQUENCE_NUMERATOR = PARAM.IMPLICIT_SEQUENCE_NUMERATOR
   AND STEP_TRACE.STEP_NAME = PARAM.STEP_NAME
WHEN MATCHED
THEN UPDATE
	SET 
		DH_FIN_EXEC_STEP = PARAM.DH_FIN_EXEC_STEP,
		STEP_STATE = PARAM.STEP_STATE
WHEN NOT MATCHED 
THEN INSERT (BATCH_NAME, ID_EXECUTION,SEQUENCE_NUMERATOR,IMPLICIT_SEQUENCE_NUMERATOR,STEP_NAME,STEP_STATE, DH_DEBUT_EXEC_STEP,DH_FIN_EXEC_STEP)
	VALUES
	(PARAM.BATCH_NAME, PARAM.ID_EXECUTION,PARAM.SEQUENCE_NUMERATOR,PARAM.IMPLICIT_SEQUENCE_NUMERATOR,PARAM.STEP_NAME,PARAM.STEP_STATE, PARAM.DH_DEBUT_EXEC_STEP,PARAM.DH_FIN_EXEC_STEP);
);